// –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞—Ä—Ç–æ—é
class MapManager {
  constructor() {
    this.map = null;
    this.markers = [];
    this.init();
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏
  init() {
    // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç–∏ - –ø—Ä–∏–±–ª–∏–∑–Ω–æ –º—ñ–∂ –∑–∞—Ö—ñ–¥–Ω–∏–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ –£–∫—Ä–∞—ó–Ω–∏
    const centerLat = 49.0;
    const centerLng = 24.5;

    this.map = L.map('map').setView([centerLat, centerLng], 8);

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–∞—Ä—É OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      maxZoom: 18
    }).addTo(this.map);

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤ –¥–ª—è –ø–æ–ø–∞–ø—ñ–≤
    this.addCustomStyles();

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —ñ–Ω—Å—Ç–∞–Ω—Å –∫–∞—Ä—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.mapInstance = this;
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤
  addCustomStyles() {
    const style = document.createElement('style');
    style.textContent = `
            .leaflet-popup-content-wrapper {
                border-radius: 10px;
                box-shadow: 0 8px 25px rgba(0,0,0,0.2);
            }
            .leaflet-popup-content {
                margin: 15px;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }
            .leaflet-popup-tip {
                background: white;
            }
        `;
    document.head.appendChild(style);
  }

  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π –Ω–∞ –∫–∞—Ä—Ç—ñ
  displayEventsOnMap() {
    // –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –º–∞—Ä–∫–µ—Ä—ñ–≤
    this.clearMarkers();

    if (!app || !app.events) return;

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä–∫–µ—Ä—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ–¥—ñ—ó
    app.events.forEach(event => {
      this.addEventMarker(event);
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É –∫–∞—Ä—Ç–∏ –ø—ñ–¥ –≤—Å—ñ –º–∞—Ä–∫–µ—Ä–∏
    if (this.markers.length > 0) {
      const group = new L.featureGroup(this.markers);
      this.map.fitBounds(group.getBounds().pad(0.1));
    }
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –ø–æ–¥—ñ—ó
  addEventMarker(event) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (isNaN(event.lat) || isNaN(event.lng)) {
      console.warn(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –ø–æ–¥—ñ—ó: ${event.title}`);
      return;
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó —ñ–∫–æ–Ω–∫–∏
    const customIcon = this.createCustomIcon(event);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞
    const marker = L.marker([event.lat, event.lng], { icon: customIcon })
      .addTo(this.map);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ–ø–∞–ø–∞
    const popupContent = this.createPopupContent(event);

    // –ü—Ä–∏–≤'—è–∑–∫–∞ –ø–æ–ø–∞–ø–∞ –¥–æ –º–∞—Ä–∫–µ—Ä–∞
    marker.bindPopup(popupContent, {
      maxWidth: 350,
      className: 'custom-popup'
    });

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
    marker.on('click', () => {
      // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ä—ñ –ø—Ä–∏ –∫–ª—ñ–∫—É
      this.map.setView([event.lat, event.lng], Math.max(this.map.getZoom(), 12));
    });

    this.markers.push(marker);
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó —ñ–∫–æ–Ω–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
  createCustomIcon(event) {
    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —ñ–∫–æ–Ω–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–∞—Ç–∏ –ø–æ–¥—ñ—ó
    const eventDate = new Date(event.date);
    const now = new Date();
    const isPastEvent = eventDate < now;

    const iconColor = isPastEvent ? '#95a5a6' : '#667eea';

    return L.divIcon({
      className: 'custom-marker',
      html: `
                <div style="
                    background: ${iconColor};
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    border: 3px solid white;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.3);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: 14px;
                    font-weight: bold;
                    position: relative;
                ">
                    ‚úü
                    ${!isPastEvent ? '<div style="position: absolute; top: -5px; right: -5px; background: #e74c3c; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white;"></div>' : ''}
                </div>
            `,
      iconSize: [30, 30],
      iconAnchor: [15, 15],
      popupAnchor: [0, -15]
    });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ–ø–∞–ø–∞
  createPopupContent(event) {
    const eventDate = new Date(event.date);
    const now = new Date();
    const isPastEvent = eventDate < now;

    return `
            <div class="event-popup">
                <div style="display: flex; align-items: center; margin-bottom: 10px;">
                    <h3 style="margin: 0; flex: 1;">${event.title}</h3>
                    ${!isPastEvent ? '<span style="background: #e74c3c; color: white; padding: 2px 6px; border-radius: 10px; font-size: 10px; font-weight: bold;">–ú–ê–ô–ë–£–¢–ù–Ø</span>' : ''}
                </div>
                
                <div class="date" style="color: ${isPastEvent ? '#95a5a6' : '#667eea'}; font-weight: bold; margin-bottom: 8px;">
                    üìÖ ${this.formatDateForPopup(event.date)}
                </div>
                
                <div style="margin-bottom: 8px;">
                    üìç <strong>${event.location}</strong>
                </div>
                
                <div class="description" style="margin-bottom: 10px; line-height: 1.4; color: #34495e;">
                    ${event.description}
                </div>
                
                ${event.photos && event.photos.length > 0 ?
        `<div class="photos" style="margin: 10px 0;">
                        ${event.photos.slice(0, 3).map((photo, index) =>
          `<img src="${photo}" 
                                  alt="–§–æ—Ç–æ –ø–æ–¥—ñ—ó ${index + 1}" 
                                  onclick="app.openImageModal('${photo}')"
                                  style="width: 70px; height: 50px; object-fit: cover; border-radius: 5px; margin-right: 5px; cursor: pointer; border: 2px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"
                                  onerror="this.style.display='none'">`
        ).join('')}
                        ${event.photos.length > 3 ? `<span style="font-size: 12px; color: #7f8c8d;">+${event.photos.length - 3} —â–µ</span>` : ''}
                    </div>` : ''
      }
                
                <div style="margin-top: 10px; text-align: center;">
                    <button class="view-details" onclick="app.showEventDetails(${event.id})" 
                            style="background: linear-gradient(45deg, #667eea, #764ba2); color: white; border: none; padding: 8px 16px; border-radius: 15px; cursor: pointer; font-size: 12px; font-weight: 500;">
                        üìñ –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ
                    </button>
                </div>
            </div>
        `;
  }

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –ø–æ–ø–∞–ø–∞
  formatDateForPopup(dateString) {
    const date = new Date(dateString);
    const options = {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    return date.toLocaleString('uk-UA', options);
  }

  // –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –º–∞—Ä–∫–µ—Ä—ñ–≤
  clearMarkers() {
    this.markers.forEach(marker => {
      this.map.removeLayer(marker);
    });
    this.markers = [];
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ—ó –ø–æ–¥—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ)
  addTemporaryMarker(lat, lng) {
    // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π –º–∞—Ä–∫–µ—Ä, —è–∫—â–æ —î
    if (this.tempMarker) {
      this.map.removeLayer(this.tempMarker);
    }

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π –º–∞—Ä–∫–µ—Ä
    this.tempMarker = L.marker([lat, lng], {
      icon: L.divIcon({
        className: 'temp-marker',
        html: `
                    <div style="
                        background: #e74c3c;
                        width: 20px;
                        height: 20px;
                        border-radius: 50%;
                        border: 2px solid white;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.3);
                        animation: pulse 1.5s infinite;
                    "></div>
                    <style>
                        @keyframes pulse {
                            0% { transform: scale(1); opacity: 1; }
                            50% { transform: scale(1.2); opacity: 0.7; }
                            100% { transform: scale(1); opacity: 1; }
                        }
                    </style>
                `,
        iconSize: [20, 20],
        iconAnchor: [10, 10]
      })
    }).addTo(this.map);

    // –¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç—É –Ω–∞ –Ω–æ–≤–æ–º—É –º–∞—Ä–∫–µ—Ä—ñ
    this.map.setView([lat, lng], Math.max(this.map.getZoom(), 12));
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
  removeTempMarker() {
    if (this.tempMarker) {
      this.map.removeLayer(this.tempMarker);
      this.tempMarker = null;
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∫–ª—ñ–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
  enableLocationPicking(callback) {
    this.map.once('click', (e) => {
      const { lat, lng } = e.latlng;
      this.addTemporaryMarker(lat, lng);
      callback(lat, lng);
    });

    // –ó–º—ñ–Ω–∏—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Ö—Ä–µ—Å—Ç–∏–∫
    this.map.getContainer().style.cursor = 'crosshair';

    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const notification = L.popup()
      .setLatLng(this.map.getCenter())
      .setContent('–ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ü—è –ø–æ–¥—ñ—ó')
      .openOn(this.map);

    setTimeout(() => {
      this.map.closePopup(notification);
      this.map.getContainer().style.cursor = '';
    }, 3000);
  }

  // –ü–æ—à—É–∫ –º—ñ—Å—Ü—è –∑–∞ –Ω–∞–∑–≤–æ—é (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Nominatim API)
  async searchLocation(query) {
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&countrycodes=ua`
      );
      const results = await response.json();

      if (results.length > 0) {
        const result = results[0];
        const lat = parseFloat(result.lat);
        const lng = parseFloat(result.lon);

        this.map.setView([lat, lng], 15);
        this.addTemporaryMarker(lat, lng);

        return { lat, lng, display_name: result.display_name };
      } else {
        throw new Error('–ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error);
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–∑–Ω–∞—á–µ–Ω–µ –º—ñ—Å—Ü–µ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.');
      return null;
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –º–µ–∂ –∫–∞—Ä—Ç–∏
  getBounds() {
    return this.map.getBounds();
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–∂ –∫–∞—Ä—Ç–∏
  setBounds(bounds) {
    this.map.fitBounds(bounds);
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
  // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó, —â–æ DOM –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
  setTimeout(() => {
    new MapManager();
  }, 100);
});