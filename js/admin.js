/**
 * –ú–æ–¥—É–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è —Å–∞–π—Ç—É —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –¢–µ–∑–µ
 * –¢—ñ–ª—å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Google Sheets —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏
 * –í–µ—Ä—Å—ñ—è 2.0 - –±–µ–∑ —Ñ–æ—Ä–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
 */

class AdminManager {
  constructor() {
    this.isInitialized = false;
    this.autoSyncInterval = null;
    this.SYNC_INTERVAL = 6 * 60 * 60 * 1000;
    
    this.init();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
   */
  init() {
    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
    if (window.app && window.app.isInitialized) {
      this.setupAdmin();
    } else {
      window.addEventListener('appInitialized', () => {
        this.setupAdmin();
      });
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ–π
   */
  setupAdmin() {
    try {
      this.setupAutoSync();
      this.setupImportExport();
      this.setupGoogleSheetsIntegration();
      this.setupKeyboardShortcuts();
      
      this.isInitialized = true;
      console.log('–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
      this.performInitialSync();

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ:', error);
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
   */
  setupAutoSync() {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏—Å—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    const lastSync = localStorage.getItem('lastAutoSync');
    const now = Date.now();
    
    if (!lastSync || (now - parseInt(lastSync)) > this.SYNC_INTERVAL) {
      console.log('üîÑ –ß–∞—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó');
      // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ performInitialSync
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
    this.autoSyncInterval = setInterval(() => {
      this.performAutoSync();
    }, this.SYNC_INTERVAL);

    console.log(`‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ (–∫–æ–∂–Ω—ñ ${this.SYNC_INTERVAL / (1000 * 60 * 60)} –≥–æ–¥–∏–Ω)`);
  }

  /**
   * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
   */
  async performInitialSync() {
    try {
      const lastSync = localStorage.getItem('lastAutoSync');
      const now = Date.now();
      const isFirstVisit = !localStorage.getItem('taizeEvents');
      
      const shouldSync = !lastSync || 
                        (now - parseInt(lastSync)) > this.SYNC_INTERVAL ||
                        !window.app.events.length ||
                        isFirstVisit;

      if (shouldSync) {
        console.log('üîÑ –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é...');
        const success = await this.syncFromSheets(false); // false = –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        
        if (success) {
          localStorage.setItem('lastAutoSync', now.toString());
          console.log('‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
      } else {
        console.log('‚è≠Ô∏è –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
    }
  }

  /**
   * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
   */
  async performAutoSync() {
    try {
      console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...');
      
      const success = await this.syncFromSheets(false); // –¢–∏—Ö–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
      
      if (success) {
        const now = Date.now();
        localStorage.setItem('lastAutoSync', now.toString());
        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–µ–Ω–∞–≤'—è–∑–ª–∏–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        this.showQuietNotification('üîÑ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ');
      } else {
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è');
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
    }
  }

  /**
   * –†—É—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Google Sheets
   */
  async syncFromSheets(showMessages = true) {
    try {
      if (!window.sheetsDB) {
        if (showMessages) this.showError('Google Sheets —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return false;
      }

      if (showMessages) this.showInfo('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Google Sheets...');
      
      const success = await window.sheetsDB.syncWithSheets();
      
      if (success && showMessages) {
        this.showSuccess('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
      }
      
      return success;
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ä—É—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
      if (showMessages) this.showError('–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Google Sheets');
      return false;
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É/–µ–∫—Å–ø–æ—Ä—Ç—É (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
   */
  setupImportExport() {
    const adminSection = document.getElementById('admin-section');
    if (!adminSection) return;

    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É —Ñ–æ—Ä–º—É, —è–∫—â–æ —î
    const eventForm = document.getElementById('event-form');
    if (eventForm) {
      eventForm.remove();
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º–∏
    const formTitle = adminSection.querySelector('h2');
    if (formTitle && formTitle.textContent.includes('–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–æ–¥—ñ—é')) {
      formTitle.remove();
    }

    // –í–∏–¥–∞–ª—è—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π (–±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–∏–π –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
    const existingEventsTitle = adminSection.querySelector('h3');
    if (existingEventsTitle && existingEventsTitle.textContent.includes('–Ü—Å–Ω—É—é—á—ñ –ø–æ–¥—ñ—ó')) {
      existingEventsTitle.remove();
    }

    const existingEventsList = document.getElementById('admin-events-list');
    if (existingEventsList) {
      existingEventsList.remove();
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    adminSection.innerHTML = `
      <div class="admin-header">
        <h2>üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è</h2>
        <p class="subtitle">–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Google Sheets</p>
      </div>
      
      <div class="sync-status-section">
        <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó</h3>
        <div class="sync-info-grid">
          <div class="sync-info-item">
            <span class="sync-label">–û—Å—Ç–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è:</span>
            <span class="sync-value" id="last-sync-display">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
          </div>
          <div class="sync-info-item">
            <span class="sync-label">–ù–∞—Å—Ç—É–ø–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞:</span>
            <span class="sync-value" id="next-sync-display">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
          </div>
          <div class="sync-info-item">
            <span class="sync-label">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–¥—ñ–π:</span>
            <span class="sync-value" id="events-count">0</span>
          </div>
          <div class="sync-info-item">
            <span class="sync-label">–°—Ç–∞—Ç—É—Å Google Sheets:</span>
            <span class="sync-value" id="sheets-status">–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...</span>
          </div>
        </div>
      </div>

      <div class="admin-actions">
        <h3>üöÄ –î—ñ—ó</h3>
        <div class="action-buttons">
          <button onclick="adminManager.syncFromSheets(true)" class="btn btn-primary">
            üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑
          </button>
          <button onclick="adminManager.testConnection()" class="btn btn-secondary">
            üîå –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
          </button>
          <button onclick="adminManager.openGoogleSheets()" class="btn btn-secondary">
            üìä –í—ñ–¥–∫—Ä–∏—Ç–∏ Google Sheets
          </button>
        </div>
      </div>
      
      <div class="data-management">
        <h3>üíæ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏</h3>
        <div class="management-buttons">
          <button onclick="adminManager.exportData()" class="btn btn-secondary">
            üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
          </button>
          <button onclick="adminManager.importData()" class="btn btn-secondary">
            üì§ –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
          </button>
          <button onclick="adminManager.showEventsList()" class="btn btn-secondary">
            üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–¥—ñ—ó
          </button>
          <button onclick="adminManager.clearAllData()" class="btn btn-danger">
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ
          </button>
        </div>
        <input type="file" id="import-file" accept=".json" style="display: none;">
      </div>

      <div class="events-preview" id="events-preview" style="display: none;">
        <h3>üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π</h3>
        <div id="events-list-container"></div>
      </div>
    `;

    // –î–æ–¥–∞—î–º–æ CSS —Å—Ç–∏–ª—ñ
    this.addAdminStyles();

    // –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–∞–π–ª—É —ñ–º–ø–æ—Ä—Ç—É
    const importFile = document.getElementById('import-file');
    if (importFile) {
      importFile.addEventListener('change', (e) => {
        if (e.target.files[0]) {
          this.handleImportFile(e.target.files[0]);
        }
      });
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
    this.updateSyncStatus();
    setInterval(() => this.updateSyncStatus(), 30000);
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
   */
  addAdminStyles() {
    const style = document.createElement('style');
    style.id = 'admin-styles';
    style.textContent = `
      .admin-header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px;
        color: white;
      }
      
      .admin-header h2 {
        margin: 0 0 10px 0;
        color: white;
      }
      
      .sync-status-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 30px;
        border: 1px solid #e9ecef;
      }
      
      .sync-info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 15px;
        margin-top: 15px;
      }
      
      .sync-info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        background: white;
        border-radius: 6px;
        border: 1px solid #dee2e6;
      }
      
      .sync-label {
        font-weight: 500;
        color: #6c757d;
        font-size: 0.9em;
      }
      
      .sync-value {
        font-weight: 600;
        color: #495057;
      }
      
      .admin-actions, .data-management {
        margin-bottom: 30px;
      }
      
      .action-buttons, .management-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        margin-top: 15px;
      }
      
      .events-preview {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        margin-top: 20px;
      }
      
      .event-preview-item {
        background: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 6px;
        border: 1px solid #dee2e6;
      }
      
      .event-preview-item h4 {
        margin: 0 0 8px 0;
        color: #495057;
      }
      
      .event-preview-item p {
        margin: 0;
        color: #6c757d;
        font-size: 0.9em;
      }
      
      @media (max-width: 768px) {
        .sync-info-grid {
          grid-template-columns: 1fr;
        }
        
        .action-buttons, .management-buttons {
          flex-direction: column;
        }
        
        .action-buttons .btn, .management-buttons .btn {
          width: 100%;
        }
      }
    `;
    
    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ —Å—Ç–∏–ª—ñ, —è–∫—â–æ —î
    const existingStyles = document.getElementById('admin-styles');
    if (existingStyles) {
      existingStyles.remove();
    }
    
    document.head.appendChild(style);
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
   */
  updateSyncStatus() {
    // –û—Å—Ç–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
    const lastSyncElement = document.getElementById('last-sync-display');
    if (lastSyncElement) {
      const lastSync = localStorage.getItem('lastAutoSync');
      if (lastSync) {
        const lastSyncDate = new Date(parseInt(lastSync));
        lastSyncElement.textContent = this.formatTimeAgo(lastSyncDate);
      } else {
        lastSyncElement.textContent = '–©–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ';
      }
    }

    // –ù–∞—Å—Ç—É–ø–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
    const nextSyncElement = document.getElementById('next-sync-display');
    if (nextSyncElement) {
      const lastSync = localStorage.getItem('lastAutoSync');
      if (lastSync) {
        const nextSyncDate = new Date(parseInt(lastSync) + this.SYNC_INTERVAL);
        nextSyncElement.textContent = this.formatTimeUntil(nextSyncDate);
      } else {
        nextSyncElement.textContent = '–ü—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó';
      }
    }

    // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–¥—ñ–π
    const eventsCountElement = document.getElementById('events-count');
    if (eventsCountElement && window.app) {
      eventsCountElement.textContent = window.app.events.length;
    }

    // –°—Ç–∞—Ç—É—Å Google Sheets
    const sheetsStatusElement = document.getElementById('sheets-status');
    if (sheetsStatusElement && window.sheetsDB) {
      sheetsStatusElement.textContent = window.sheetsDB.isEnabled ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π';
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Google Sheets
   */
  async testConnection() {
    if (window.sheetsDB) {
      await window.sheetsDB.testConnection();
      this.updateSyncStatus();
    } else {
      this.showError('Google Sheets —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  }

  /**
   * –í—ñ–¥–∫—Ä–∏—Ç—Ç—è Google Sheets
   */
  openGoogleSheets() {
    if (window.sheetsDB) {
      window.open(window.sheetsDB.getSheetURL(), '_blank');
    } else {
      this.showError('Google Sheets —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É –ø–æ–¥—ñ–π
   */
  showEventsList() {
    const eventsPreview = document.getElementById('events-preview');
    const eventsContainer = document.getElementById('events-list-container');
    
    if (!eventsPreview || !eventsContainer) return;

    if (eventsPreview.style.display === 'none') {
      eventsPreview.style.display = 'block';
      
      if (!window.app.events.length) {
        eventsContainer.innerHTML = '<p style="text-align: center; color: #6c757d;">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø–æ–¥—ñ–π</p>';
        return;
      }

      const sortedEvents = [...window.app.events].sort((a, b) => new Date(b.date) - new Date(a.date));
      
      eventsContainer.innerHTML = sortedEvents.map(event => `
        <div class="event-preview-item">
          <h4>${this.escapeHtml(event.title)}</h4>
          <p><strong>üìÖ</strong> ${this.formatDate(event.date)}</p>
          <p><strong>üìç</strong> ${this.escapeHtml(event.location)}</p>
          <p><strong>üìù</strong> ${this.escapeHtml(event.description.substring(0, 100))}${event.description.length > 100 ? '...' : ''}</p>
        </div>
      `).join('');
    } else {
      eventsPreview.style.display = 'none';
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
   */
  setupGoogleSheetsIntegration() {
    // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
    console.log('üìä Google Sheets —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞');
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–∞—Ä—è—á–∏—Ö –∫–ª–∞–≤—ñ—à
   */
  setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
      // Ctrl+R –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
      if (e.ctrlKey && e.key === 'r' && e.target.closest('#admin-section')) {
        e.preventDefault();
        this.syncFromSheets(true);
      }

      // Ctrl+T –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
      if (e.ctrlKey && e.key === 't' && e.target.closest('#admin-section')) {
        e.preventDefault();
        this.testConnection();
      }
    });
  }

  /**
   * –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
   */
  exportData() {
    try {
      const data = {
        events: window.app ? window.app.events : [],
        metadata: {
          exportDate: new Date().toISOString(),
          version: window.app ? window.app.VERSION : '2.0.0',
          totalEvents: window.app ? window.app.events.length : 0,
          lastSync: localStorage.getItem('lastAutoSync')
        }
      };

      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);

      const a = document.createElement('a');
      a.href = url;
      a.download = `taize-events-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      this.showSuccess('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:', error);
      this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ');
    }
  }

  /**
   * –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
   */
  importData() {
    const input = document.getElementById('import-file');
    if (input) {
      input.click();
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É —ñ–º–ø–æ—Ä—Ç—É
   */
  handleImportFile(file) {
    const reader = new FileReader();

    reader.onload = (e) => {
      try {
        const data = JSON.parse(e.target.result);

        if (!data.events || !Array.isArray(data.events)) {
          throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É');
        }

        const confirmMessage = `–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ ${data.events.length} –ø–æ–¥—ñ–π?\n\n–¶–µ –∑–∞–º—ñ–Ω–∏—Ç—å –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ!`;

        if (confirm(confirmMessage)) {
          if (window.app) {
            window.app.events = data.events;
            window.app.saveEvents();
            window.app.refreshUI();
          }

          this.showSuccess(`${data.events.length} –ø–æ–¥—ñ–π —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!`);
          this.updateSyncStatus();
        }

      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error);
        this.showError('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: ' + error.message);
      } finally {
        const input = document.getElementById('import-file');
        if (input) input.value = '';
      }
    };

    reader.onerror = () => {
      this.showError('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É');
    };

    reader.readAsText(file);
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
   */
  clearAllData() {
    const confirmMessage = `–£–í–ê–ì–ê! –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!\n\n–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ.\n–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?`;

    if (confirm(confirmMessage)) {
      const doubleConfirm = prompt('–í–≤–µ–¥—ñ—Ç—å "–í–ò–î–ê–õ–ò–¢–ò" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:');

      if (doubleConfirm === '–í–ò–î–ê–õ–ò–¢–ò') {
        try {
          localStorage.removeItem('taizeEvents');
          localStorage.removeItem('taizeMetadata');
          localStorage.removeItem('lastAutoSync');

          if (window.app) {
            window.app.events = [];
            window.app.refreshUI();
          }

          this.showSuccess('–í—Å—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ');
          this.updateSyncStatus();

        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
          this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ');
        }
      }
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É "—Ç–æ–º—É"
   */
  formatTimeAgo(date) {
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) {
      return '–©–æ–π–Ω–æ';
    } else if (diffInSeconds < 3600) {
      const minutes = Math.floor(diffInSeconds / 60);
      return `${minutes} —Ö–≤. —Ç–æ–º—É`;
    } else if (diffInSeconds < 86400) {
      const hours = Math.floor(diffInSeconds / 3600);
      return `${hours} –≥–æ–¥. —Ç–æ–º—É`;
    } else {
      const days = Math.floor(diffInSeconds / 86400);
      return `${days} –¥–Ω. —Ç–æ–º—É`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É "—á–µ—Ä–µ–∑"
   */
  formatTimeUntil(date) {
    const now = new Date();
    const diffInSeconds = Math.floor((date - now) / 1000);
    
    if (diffInSeconds < 0) {
      return '–ó–∞—Ä–∞–∑';
    } else if (diffInSeconds < 3600) {
      const minutes = Math.floor(diffInSeconds / 60);
      return `–ß–µ—Ä–µ–∑ ${minutes} —Ö–≤.`;
    } else if (diffInSeconds < 86400) {
      const hours = Math.floor(diffInSeconds / 3600);
      return `–ß–µ—Ä–µ–∑ ${hours} –≥–æ–¥.`;
    } else {
      const days = Math.floor(diffInSeconds / 86400);
      return `–ß–µ—Ä–µ–∑ ${days} –¥–Ω.`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
   */
  formatDate(dateString) {
    try {
      const date = new Date(dateString);
      return date.toLocaleString('uk-UA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (error) {
      return dateString;
    }
  }

  /**
   * –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML
   */
  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * –¢–∏—Ö–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–µ–Ω—à –Ω–∞–≤'—è–∑–ª–∏–≤–µ)
   */
  showQuietNotification(message) {
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #28a745;
      color: white;
      padding: 10px 15px;
      border-radius: 5px;
      font-size: 14px;
      z-index: 1000;
      opacity: 0.9;
      transition: opacity 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.style.opacity = '0';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }

  /**
   * –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  showError(message) {
    console.error(message);
    this.showNotification('‚ùå ' + message, 'error');
  }

  showSuccess(message) {
    console.log(message);
    this.showNotification('‚úÖ ' + message, 'success');
  }

  showInfo(message) {
    console.info(message);
    this.showNotification('‚ÑπÔ∏è ' + message, 'info');
  }

  showNotification(message, type = 'info') {
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    let container = document.getElementById('notifications-container');
    if (!container) {
      container = document.createElement('div');
      container.id = 'notifications-container';
      container.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
        max-width: 400px;
      `;
      document.body.appendChild(container);
    }

    const colors = {
      error: { bg: '#fee', border: '#e74c3c', text: '#c0392b' },
      success: { bg: '#efe', border: '#27ae60', text: '#1e8449' },
      info: { bg: '#e3f2fd', border: '#2196f3', text: '#1976d2' }
    };

    const color = colors[type] || colors.info;

    const notification = document.createElement('div');
    notification.style.cssText = `
      background: ${color.bg};
      border: 2px solid ${color.border};
      color: ${color.text};
      padding: 15px;
      margin-bottom: 10px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      font-weight: 500;
      cursor: pointer;
      animation: slideIn 0.3s ease-out;
    `;

    notification.innerHTML = `
      ${message}
      <span style="position: absolute; top: 5px; right: 10px; font-size: 18px; opacity: 0.6;">√ó</span>
    `;

    container.appendChild(notification);

    const autoRemove = setTimeout(() => {
      this.removeNotification(notification);
    }, 5000);

    notification.addEventListener('click', () => {
      clearTimeout(autoRemove);
      this.removeNotification(notification);
    });
  }

  removeNotification(notification) {
    notification.style.animation = 'slideOut 0.3s ease-in';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ
   */
  destroy() {
    if (this.autoSyncInterval) {
      clearInterval(this.autoSyncInterval);
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
let adminManager;

document.addEventListener('DOMContentLoaded', () => {
  adminManager = new AdminManager();
});

// –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener('beforeunload', () => {
  if (adminManager) {
    adminManager.destroy();
  }
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è–∫ –º–æ–¥—É–ª—å
if (typeof module !== 'undefined' && module.exports) {
  module.exports = AdminManager;
}