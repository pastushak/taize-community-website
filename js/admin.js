/**
 * –ú–æ–¥—É–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è —Å–∞–π—Ç—É —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –¢–µ–∑–µ
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–¥—ñ—è–º–∏, –≤–∞–ª—ñ–¥–∞—Ü—ñ—é, –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç–∞ —ñ–º–ø–æ—Ä—Ç/–µ–∫—Å–ø–æ—Ä—Ç
 */

class AdminManager {
  constructor() {
    this.isInitialized = false;
    this.autoSaveTimer = null;
    this.validationRules = this.setupValidationRules();

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥—É –¥–ª—è –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    this.debouncedSave = this.debounce(this.saveFormData.bind(this), 1000);

    this.init();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
   */
  init() {
    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
    if (window.app && window.app.isInitialized) {
      this.setupAdmin();
    } else {
      window.addEventListener('appInitialized', () => {
        this.setupAdmin();
      });
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ–π
   */
  setupAdmin() {
    try {
      this.setupLocationHelpers();
      this.setupFormValidation();
      this.setupAutoSave();
      this.setupPreview();
      this.setupImportExport();
      this.setupAdvancedFeatures();

      this.isInitialized = true;
      console.log('–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ:', error);
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
   */
  setupValidationRules() {
    return {
      'event-title': {
        required: true,
        minLength: 3,
        maxLength: 100,
        pattern: /^[–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ\w\s\-.,!?()]+$/u
      },
      'event-date': {
        required: true,
        custom: this.validateEventDate.bind(this)
      },
      'event-location': {
        required: true,
        minLength: 3,
        maxLength: 200
      },
      'event-lat': {
        required: true,
        type: 'number',
        min: 44,
        max: 52
      },
      'event-lng': {
        required: true,
        type: 'number',
        min: 22,
        max: 40
      },
      'event-description': {
        required: true,
        minLength: 10,
        maxLength: 500
      },
      'event-full-description': {
        maxLength: 2000
      },
      'event-program-link': {
        type: 'url'
      }
    };
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–º—ñ—á–Ω–∏–∫—ñ–≤ –¥–ª—è –ª–æ–∫–∞—Ü—ñ—ó
   */
  setupLocationHelpers() {
    const latInput = document.getElementById('event-lat');
    const lngInput = document.getElementById('event-lng');
    const locationInput = document.getElementById('event-location');

    if (!latInput || !lngInput || !locationInput) return;

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–æ–ø–æ–º–æ–≥–∏
    const helperContainer = this.createLocationHelperButtons();

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–ª—è –¥–æ–≤–≥–æ—Ç–∏
    const lngGroup = lngInput.closest('.form-group');
    if (lngGroup) {
      lngGroup.appendChild(helperContainer);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∞–¥—Ä–µ—Å–∏
    locationInput.addEventListener('blur', () => {
      if (locationInput.value.trim() && !latInput.value && !lngInput.value) {
        this.autoFillCoordinates(locationInput.value.trim());
      }
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    [latInput, lngInput].forEach(input => {
      input.addEventListener('input', () => {
        this.validateCoordinatesRealtime();
      });
    });
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–æ–ø–æ–º–æ–≥–∏ –¥–ª—è –ª–æ–∫–∞—Ü—ñ—ó
   */
  createLocationHelperButtons() {
    const container = document.createElement('div');
    container.className = 'location-helpers';
    container.style.cssText = `
            margin-top: 10px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        `;

    const buttons = [
      {
        text: 'üó∫Ô∏è –í–∏–±—Ä–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ',
        action: this.pickLocationOnMap.bind(this),
        tooltip: '–ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—ñ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'
      },
      {
        text: 'üîç –ó–Ω–∞–π—Ç–∏ –∑–∞ –∞–¥—Ä–µ—Å–æ—é',
        action: this.searchLocationDialog.bind(this),
        tooltip: '–ü–æ—à—É–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ü—è'
      },
      {
        text: 'üìç –ú–æ—î –º—ñ—Å—Ü–µ',
        action: this.getCurrentLocation.bind(this),
        tooltip: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è'
      },
      {
        text: 'üéØ –¶–µ–Ω—Ç—Ä –º—ñ—Å—Ç–∞',
        action: this.setCityCenter.bind(this),
        tooltip: '–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü–µ–Ω—Ç—Ä –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ –º—ñ—Å—Ç–∞'
      }
    ];

    buttons.forEach(btn => {
      const button = document.createElement('button');
      button.type = 'button';
      button.className = 'btn btn-secondary btn-sm';
      button.textContent = btn.text;
      button.title = btn.tooltip;
      button.addEventListener('click', btn.action);

      button.style.cssText = `
                font-size: 12px;
                padding: 6px 12px;
                margin-bottom: 5px;
            `;

      container.appendChild(button);
    });

    return container;
  }

  /**
   * –í–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó –Ω–∞ –∫–∞—Ä—Ç—ñ
   */
  async pickLocationOnMap() {
    if (!window.mapInstance) {
      this.showError('–ö–∞—Ä—Ç–∞ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      return;
    }

    try {
      // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ —Å–µ–∫—Ü—ñ—é –∫–∞—Ä—Ç–∏
      if (window.app) {
        window.app.showSection('map');
      }

      this.showInfo('–ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—ñ –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ü—è –ø–æ–¥—ñ—ó');

      // –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–µ–∂–∏–º—É –≤–∏–±–æ—Ä—É –ª–æ–∫–∞—Ü—ñ—ó
      window.mapInstance.enableLocationPicking((lat, lng) => {
        this.setCoordinates(lat, lng);

        // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å
        setTimeout(() => {
          if (window.app) {
            window.app.showSection('admin');
          }
          this.showSuccess('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ –∫–∞—Ä—Ç–∏');
        }, 1000);
      });

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –Ω–∞ –∫–∞—Ä—Ç—ñ:', error);
      this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤–∏–±—ñ—Ä –Ω–∞ –∫–∞—Ä—Ç—ñ');
    }
  }

  /**
   * –î—ñ–∞–ª–æ–≥ –ø–æ—à—É–∫—É –ª–æ–∫–∞—Ü—ñ—ó
   */
  async searchLocationDialog() {
    const address = prompt('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ü—è –∞–±–æ –∞–¥—Ä–µ—Å—É –¥–ª—è –ø–æ—à—É–∫—É:');
    if (!address) return;

    await this.searchLocation(address);
  }

  /**
   * –ü–æ—à—É–∫ –ª–æ–∫–∞—Ü—ñ—ó –∑–∞ –∞–¥—Ä–µ—Å–æ—é
   */
  async searchLocation(address) {
    if (!window.mapInstance) {
      this.showError('–ö–∞—Ä—Ç–∞ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      return;
    }

    try {
      this.showInfo('–ü–æ—à—É–∫ –ª–æ–∫–∞—Ü—ñ—ó...');

      const result = await window.mapInstance.searchLocation(address);

      if (result) {
        this.setCoordinates(result.lat, result.lng);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è –ª–æ–∫–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–æ –ø–æ—Ä–æ–∂–Ω—î
        const locationField = document.getElementById('event-location');
        if (locationField && !locationField.value.trim()) {
          const simplifiedLocation = result.display_name
            .split(',')
            .slice(0, 2)
            .join(', ')
            .trim();
          locationField.value = simplifiedLocation;
        }

        this.showSuccess('–õ–æ–∫–∞—Ü—ñ—é –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      }

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error);
      this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–∑–Ω–∞—á–µ–Ω–µ –º—ñ—Å—Ü–µ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.');
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
   */
  getCurrentLocation() {
    if (!navigator.geolocation) {
      this.showError('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é.');
      return;
    }

    this.showInfo('–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è...');

    const options = {
      enableHighAccuracy: true,
      timeout: 15000,
      maximumAge: 300000
    };

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;

        this.setCoordinates(lat, lng);

        if (window.mapInstance && window.mapInstance.addTemporaryMarker) {
          window.mapInstance.addTemporaryMarker(lat, lng);
        }

        this.showSuccess('–í–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      },
      (error) => {
        let errorMessage = '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è';

        switch (error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = '–î–æ—Å—Ç—É–ø –¥–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π';
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
            break;
          case error.TIMEOUT:
            errorMessage = '–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –≤–∏—á–µ—Ä–ø–∞–Ω–æ';
            break;
        }

        this.showError(errorMessage);
      },
      options
    );
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ –º—ñ—Å—Ç–∞
   */
  async setCityCenter() {
    const cities = {
      '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫': { lat: 48.9226, lng: 24.7111 },
      '–õ—å–≤—ñ–≤': { lat: 49.8397, lng: 24.0297 },
      '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å': { lat: 49.5535, lng: 25.5948 },
      '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ': { lat: 48.2920, lng: 25.9358 },
      '–ö–∞–ª—É—à': { lat: 49.0213, lng: 24.3734 },
      '–ö–æ–ª–æ–º–∏—è': { lat: 48.5219, lng: 25.0406 }
    };

    const cityNames = Object.keys(cities);
    const selectedCity = prompt(
      '–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:\n' +
      cityNames.map((city, index) => `${index + 1}. ${city}`).join('\n') +
      '\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É:'
    );

    if (!selectedCity) return;

    let city = null;

    // –ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º
    const cityIndex = parseInt(selectedCity) - 1;
    if (cityIndex >= 0 && cityIndex < cityNames.length) {
      city = cityNames[cityIndex];
    } else {
      // –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é
      city = cityNames.find(name =>
        name.toLowerCase().includes(selectedCity.toLowerCase())
      );
    }

    if (city && cities[city]) {
      this.setCoordinates(cities[city].lat, cities[city].lng);
      this.showSuccess(`–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ü–µ–Ω—Ç—Ä—É –º—ñ—Å—Ç–∞ ${city}`);
    } else {
      this.showError('–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ø–æ–ª—è —Ñ–æ—Ä–º–∏
   */
  setCoordinates(lat, lng) {
    const latInput = document.getElementById('event-lat');
    const lngInput = document.getElementById('event-lng');

    if (latInput) latInput.value = lat.toFixed(6);
    if (lngInput) lng.value = lng.toFixed(6);

    this.validateCoordinatesRealtime();
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞ –∞–¥—Ä–µ—Å–æ—é
   */
  async autoFillCoordinates(address) {
    if (!window.mapInstance) return;

    try {
      const result = await window.mapInstance.searchLocation(address);
      if (result && !document.getElementById('event-lat').value) {
        this.setCoordinates(result.lat, result.lng);
      }
    } catch (error) {
      // –¢–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
      console.log('–ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –≤–¥–∞–ª–æ—Å—è:', error);
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º–∏
   */
  setupFormValidation() {
    const form = document.getElementById('event-form');
    if (!form) return;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    Object.keys(this.validationRules).forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (field) {
        field.addEventListener('blur', () => this.validateField(field));
        field.addEventListener('input', () => {
          this.clearFieldError(field);
          this.debouncedValidate(field);
        });
      }
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
    form.addEventListener('submit', (e) => {
      if (!this.validateForm()) {
        e.preventDefault();
      }
    });
  }

  /**
   * –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
   */
  debouncedValidate = this.debounce((field) => {
    this.validateField(field);
  }, 500);

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–∫—Ä–µ–º–æ–≥–æ –ø–æ–ª—è
   */
  validateField(field) {
    if (!field || !field.id) return true;

    const rules = this.validationRules[field.id];
    if (!rules) return true;

    const value = field.value.trim();
    const errors = [];

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—Å—Ç—ñ
    if (rules.required && !value) {
      errors.push('–¶–µ –ø–æ–ª–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è');
    }

    if (value) {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
      if (rules.minLength && value.length < rules.minLength) {
        errors.push(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${rules.minLength} —Å–∏–º–≤–æ–ª—ñ–≤`);
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
      if (rules.maxLength && value.length > rules.maxLength) {
        errors.push(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${rules.maxLength} —Å–∏–º–≤–æ–ª—ñ–≤`);
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —à–∞–±–ª–æ–Ω—É
      if (rules.pattern && !rules.pattern.test(value)) {
        errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏ –≤ –ø–æ–ª—ñ');
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É
      if (rules.type === 'number') {
        const num = parseFloat(value);
        if (isNaN(num)) {
          errors.push('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ');
        } else {
          if (rules.min !== undefined && num < rules.min) {
            errors.push(`–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ ${rules.min}`);
          }
          if (rules.max !== undefined && num > rules.max) {
            errors.push(`–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ ${rules.max}`);
          }
        }
      }

      if (rules.type === 'url' && !this.isValidUrl(value)) {
        errors.push('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL');
      }

      // –ö–∞—Å—Ç–æ–º–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
      if (rules.custom) {
        const customError = rules.custom(value);
        if (customError) {
          errors.push(customError);
        }
      }
    }

    if (errors.length > 0) {
      this.showFieldError(field, errors[0]);
      return false;
    } else {
      this.clearFieldError(field);
      this.showFieldSuccess(field);
      return true;
    }
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏ –ø–æ–¥—ñ—ó
   */
  validateEventDate(dateString) {
    if (!dateString) return null;

    const selectedDate = new Date(dateString);
    const now = new Date();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –¥–∞—Ç–∏
    if (isNaN(selectedDate.getTime())) {
      return '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞';
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥–∞—Ç–∞ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–∞–≤–Ω—è (–±—ñ–ª—å—à–µ —Ä–æ–∫—É —Ç–æ–º—É)
    const oneYearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());

    if (selectedDate < oneYearAgo) {
      return '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ —Ä–æ–∫—É —Ç–æ–º—É';
    }

    // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –¥—É–∂–µ –¥–∞–ª–µ–∫–∏—Ö –¥–∞—Ç (–±—ñ–ª—å—à–µ —Ä–æ–∫—É –≤–ø–µ—Ä–µ–¥)
    const oneYearForward = new Date(now.getFullYear() + 1, now.getMonth(), now.getDate());

    if (selectedDate > oneYearForward) {
      return '–î–∞—Ç–∞ –∑–¥–∞—î—Ç—å—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–∞–ª–µ–∫–æ—é –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É';
    }

    return null;
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
   */
  validateCoordinatesRealtime() {
    const latInput = document.getElementById('event-lat');
    const lngInput = document.getElementById('event-lng');

    if (!latInput || !lngInput) return;

    const lat = parseFloat(latInput.value);
    const lng = parseFloat(lngInput.value);

    if (!isNaN(lat) && !isNaN(lng)) {
      // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–∞ –∫–∞—Ä—Ç—ñ
      if (window.mapInstance && window.mapInstance.addTemporaryMarker) {
        window.mapInstance.addTemporaryMarker(lat, lng);
      }
    }
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—î—ó —Ñ–æ—Ä–º–∏
   */
  validateForm() {
    let isValid = true;

    Object.keys(this.validationRules).forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (field) {
        const fieldValid = this.validateField(field);
        if (!fieldValid) {
          isValid = false;
        }
      }
    });

    return isValid;
  }

  /**
   * –ü–æ–∫–∞–∑ –ø–æ–º–∏–ª–∫–∏ –ø–æ–ª—è
   */
  showFieldError(field, message) {
    this.clearFieldError(field);

    field.style.borderColor = '#e74c3c';
    field.style.boxShadow = '0 0 5px rgba(231, 76, 60, 0.3)';

    const errorDiv = document.createElement('div');
    errorDiv.className = 'field-error';
    errorDiv.style.cssText = `
            color: #e74c3c;
            font-size: 12px;
            margin-top: 5px;
            display: flex;
            align-items: center;
            gap: 5px;
        `;
    errorDiv.innerHTML = `<span>‚ö†Ô∏è</span> ${message}`;

    field.parentNode.appendChild(errorDiv);
  }

  /**
   * –ü–æ–∫–∞–∑ —É—Å–ø—ñ—Ö—É –ø–æ–ª—è
   */
  showFieldSuccess(field) {
    field.style.borderColor = '#27ae60';
    field.style.boxShadow = '0 0 5px rgba(39, 174, 96, 0.3)';

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É—Å–ø—ñ—Ö—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
      if (field.style.borderColor === 'rgb(39, 174, 96)') {
        field.style.borderColor = '#e0e0e0';
        field.style.boxShadow = '';
      }
    }, 2000);
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –ø–æ–ª—è
   */
  clearFieldError(field) {
    field.style.borderColor = '#e0e0e0';
    field.style.boxShadow = '';

    const existingError = field.parentNode.querySelector('.field-error');
    if (existingError) {
      existingError.remove();
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
   */
  setupAutoSave() {
    const form = document.getElementById('event-form');
    if (!form) return;

    const inputs = form.querySelectorAll('input, textarea, select');

    inputs.forEach(input => {
      input.addEventListener('input', () => {
        this.debouncedSave();
      });
    });

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    this.loadFormData();

    // –û—á–∏—â–µ–Ω–Ω—è –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ —É—Å–ø—ñ—à–Ω—ñ–π –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ä–º–∏
    form.addEventListener('submit', () => {
      this.clearFormData();
    });
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
   */
  saveFormData() {
    try {
      const form = document.getElementById('event-form');
      if (!form) return;

      const data = {};
      const inputs = form.querySelectorAll('input, textarea, select');

      inputs.forEach(input => {
        if (input.id && input.value.trim()) {
          data[input.id] = input.value.trim();
        }
      });

      data.timestamp = new Date().toISOString();
      localStorage.setItem('taizeFormDraft', JSON.stringify(data));

      console.log('–ß–µ—Ä–Ω–µ—Ç–∫–∞ —Ñ–æ—Ä–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∞');

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–Ω–µ—Ç–∫–∏:', error);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
   */
  loadFormData() {
    try {
      const savedData = localStorage.getItem('taizeFormDraft');
      if (!savedData) return;

      const data = JSON.parse(savedData);

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥–∞–Ω—ñ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ (–±—ñ–ª—å—à–µ 24 –≥–æ–¥–∏–Ω)
      if (data.timestamp) {
        const saveTime = new Date(data.timestamp);
        const now = new Date();
        const hoursDiff = (now - saveTime) / (1000 * 60 * 60);

        if (hoursDiff > 24) {
          this.clearFormData();
          return;
        }
      }

      Object.keys(data).forEach(key => {
        if (key !== 'timestamp') {
          const element = document.getElementById(key);
          if (element && data[key]) {
            element.value = data[key];
          }
        }
      });

      console.log('–ß–µ—Ä–Ω–µ—Ç–∫–∞ —Ñ–æ—Ä–º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–Ω–µ—Ç–∫–∏:', error);
      this.clearFormData();
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
   */
  clearFormData() {
    localStorage.removeItem('taizeFormDraft');

    if (window.mapInstance && window.mapInstance.removeTempMarker) {
      window.mapInstance.removeTempMarker();
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
   */
  setupPreview() {
    const form = document.getElementById('event-form');
    if (!form) return;

    const submitButton = form.querySelector('button[type="submit"]');
    if (submitButton) {
      const previewButton = document.createElement('button');
      previewButton.type = 'button';
      previewButton.className = 'btn btn-secondary';
      previewButton.innerHTML = 'üëÅÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥';
      previewButton.addEventListener('click', () => this.showPreview());

      submitButton.parentNode.insertBefore(previewButton, submitButton);
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
   */
  showPreview() {
    if (!this.validateForm()) {
      this.showError('–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ');
      return;
    }

    const formData = this.getFormData();

    const previewEvent = {
      id: 'preview',
      title: formData.title,
      date: formData.date,
      location: formData.location,
      lat: parseFloat(formData.lat),
      lng: parseFloat(formData.lng),
      description: formData.description,
      fullDescription: formData.fullDescription || formData.description,
      programLink: formData.programLink,
      photos: this.parsePhotos(formData.photos),
      createdAt: new Date().toISOString()
    };

    if (window.app && window.app.showEventDetails) {
      window.app.showEventDetails('preview', previewEvent);
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–æ—Ä–º–∏
   */
  getFormData() {
    return {
      title: this.getElementValue('event-title'),
      date: this.getElementValue('event-date'),
      location: this.getElementValue('event-location'),
      lat: this.getElementValue('event-lat'),
      lng: this.getElementValue('event-lng'),
      description: this.getElementValue('event-description'),
      fullDescription: this.getElementValue('event-full-description'),
      programLink: this.getElementValue('event-program-link'),
      photos: this.getElementValue('event-photos')
    };
  }

  /**
   * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞
   */
  getElementValue(id) {
    const element = document.getElementById(id);
    return element ? element.value.trim() : '';
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
   */
  parsePhotos(photosString) {
    if (!photosString) return [];

    return photosString
      .split(',')
      .map(url => url.trim())
      .filter(url => url && this.isValidUrl(url));
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ URL
   */
  isValidUrl(string) {
    try {
      new URL(string);
      return true;
    } catch (_) {
      return false;
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É/–µ–∫—Å–ø–æ—Ä—Ç—É
   */
  setupImportExport() {
    const adminSection = document.getElementById('admin-section');
    if (!adminSection) return;

    const exportImportDiv = document.createElement('div');
    exportImportDiv.className = 'import-export-section';
    exportImportDiv.innerHTML = `
            <h3>üìä –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏</h3>
            <div style="margin: 20px 0; display: flex; gap: 10px; flex-wrap: wrap;">
                <button onclick="adminManager.exportData()" class="btn btn-secondary">
                    üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó
                </button>
                <button onclick="adminManager.importData()" class="btn btn-secondary">
                    üì§ –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó
                </button>
                <button onclick="adminManager.exportStatistics()" class="btn btn-secondary">
                    üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </button>
                <button onclick="adminManager.clearAllData()" class="btn btn-danger">
                    üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ
                </button>
                <input type="file" id="import-file" accept=".json" style="display: none;">
            </div>
        `;

    adminSection.appendChild(exportImportDiv);

    // –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–∞–π–ª—É —ñ–º–ø–æ—Ä—Ç—É
    const importFile = document.getElementById('import-file');
    if (importFile) {
      importFile.addEventListener('change', (e) => {
        if (e.target.files[0]) {
          this.handleImportFile(e.target.files[0]);
        }
      });
    }
  }

  /**
   * –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
   */
  exportData() {
    try {
      const data = {
        events: window.app ? window.app.events : [],
        metadata: {
          exportDate: new Date().toISOString(),
          version: window.app ? window.app.VERSION : '1.0.0',
          totalEvents: window.app ? window.app.events.length : 0
        }
      };

      const blob = new Blob([JSON.stringify(data, null, 2)],
        { type: 'application/json' });
      const url = URL.createObjectURL(blob);

      const a = document.createElement('a');
      a.href = url;
      a.download = `taize-events-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      this.showSuccess('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:', error);
      this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ');
    }
  }

  /**
   * –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
   */
  importData() {
    const input = document.getElementById('import-file');
    if (input) {
      input.click();
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É —ñ–º–ø–æ—Ä—Ç—É
   */
  handleImportFile(file) {
    const reader = new FileReader();

    reader.onload = (e) => {
      try {
        const data = JSON.parse(e.target.result);

        if (!data.events || !Array.isArray(data.events)) {
          throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É');
        }

        const confirmMessage = `
–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ ${data.events.length} –ø–æ–¥—ñ–π?
${data.metadata ? `\n–î–∞—Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: ${new Date(data.metadata.exportDate).toLocaleString('uk-UA')}` : ''}
\n–¶–µ –∑–∞–º—ñ–Ω–∏—Ç—å –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ!
                `.trim();

        if (confirm(confirmMessage)) {
          if (window.app) {
            window.app.events = data.events;
            window.app.saveEvents();
            window.app.refreshUI();
          }

          this.showSuccess(`${data.events.length} –ø–æ–¥—ñ–π —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!`);
        }

      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error);
        this.showError('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: ' + error.message);
      } finally {
        // –û—á–∏—â–µ–Ω–Ω—è input —Ñ–∞–π–ª—É
        const input = document.getElementById('import-file');
        if (input) input.value = '';
      }
    };

    reader.onerror = () => {
      this.showError('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É');
    };

    reader.readAsText(file);
  }

  /**
   * –ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  exportStatistics() {
    try {
      if (!window.app || !window.app.events) {
        this.showError('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É');
        return;
      }

      const stats = this.generateStatistics(window.app.events);

      const csvContent = this.convertStatisticsToCSV(stats);
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);

      const a = document.createElement('a');
      a.href = url;
      a.download = `taize-statistics-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      this.showSuccess('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  generateStatistics(events) {
    const now = new Date();
    const currentYear = now.getFullYear();

    const stats = {
      total: events.length,
      past: 0,
      future: 0,
      currentYear: 0,
      withPhotos: 0,
      withPrograms: 0,
      locations: {},
      monthlyDistribution: {},
      averagePhotos: 0
    };

    let totalPhotos = 0;

    events.forEach(event => {
      const eventDate = new Date(event.date);
      const eventYear = eventDate.getFullYear();
      const eventMonth = eventDate.toLocaleDateString('uk-UA', { month: 'long', year: 'numeric' });

      // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –º–∏–Ω—É–ª–∏—Ö —Ç–∞ –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–æ–¥—ñ–π
      if (eventDate < now) {
        stats.past++;
      } else {
        stats.future++;
      }

      // –ü–æ–¥—ñ—ó –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∫—É
      if (eventYear === currentYear) {
        stats.currentYear++;
      }

      // –ü–æ–¥—ñ—ó –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏
      if (event.photos && event.photos.length > 0) {
        stats.withPhotos++;
        totalPhotos += event.photos.length;
      }

      // –ü–æ–¥—ñ—ó –∑ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏
      if (event.programLink) {
        stats.withPrograms++;
      }

      // –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –ª–æ–∫–∞—Ü—ñ—è—Ö
      const location = event.location || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
      stats.locations[location] = (stats.locations[location] || 0) + 1;

      // –ú—ñ—Å—è—á–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª
      stats.monthlyDistribution[eventMonth] = (stats.monthlyDistribution[eventMonth] || 0) + 1;
    });

    stats.averagePhotos = stats.withPhotos > 0 ? (totalPhotos / stats.withPhotos).toFixed(1) : 0;

    return stats;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV
   */
  convertStatisticsToCSV(stats) {
    let csv = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—ñ–π —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –¢–µ–∑–µ\n\n';
    csv += '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n';
    csv += '–ü–æ–∫–∞–∑–Ω–∏–∫,–ó–Ω–∞—á–µ–Ω–Ω—è\n';
    csv += `–í—Å—å–æ–≥–æ –ø–æ–¥—ñ–π,${stats.total}\n`;
    csv += `–ú–∏–Ω—É–ª—ñ –ø–æ–¥—ñ—ó,${stats.past}\n`;
    csv += `–ú–∞–π–±—É—Ç–Ω—ñ –ø–æ–¥—ñ—ó,${stats.future}\n`;
    csv += `–ü–æ–¥—ñ—ó –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∫—É,${stats.currentYear}\n`;
    csv += `–ü–æ–¥—ñ—ó –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏,${stats.withPhotos}\n`;
    csv += `–ü–æ–¥—ñ—ó –∑ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏,${stats.withPrograms}\n`;
    csv += `–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ,${stats.averagePhotos}\n\n`;

    csv += '–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –ª–æ–∫–∞—Ü—ñ—è—Ö\n';
    csv += '–õ–æ–∫–∞—Ü—ñ—è,–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–¥—ñ–π\n';
    Object.entries(stats.locations).forEach(([location, count]) => {
      csv += `"${location}",${count}\n`;
    });

    csv += '\n–ú—ñ—Å—è—á–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª\n';
    csv += '–ú—ñ—Å—è—Ü—å,–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–¥—ñ–π\n';
    Object.entries(stats.monthlyDistribution).forEach(([month, count]) => {
      csv += `"${month}",${count}\n`;
    });

    return csv;
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
   */
  clearAllData() {
    const confirmMessage = `
–£–í–ê–ì–ê! –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!

–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å:
‚Ä¢ –í—Å—ñ –ø–æ–¥—ñ—ó
‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ —á–µ—Ä–Ω–µ—Ç–∫–∏
‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è

–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?
        `.trim();

    if (confirm(confirmMessage)) {
      const doubleConfirm = prompt('–í–≤–µ–¥—ñ—Ç—å "–í–ò–î–ê–õ–ò–¢–ò" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:');

      if (doubleConfirm === '–í–ò–î–ê–õ–ò–¢–ò') {
        try {
          localStorage.removeItem('taizeEvents');
          localStorage.removeItem('taizeMetadata');
          localStorage.removeItem('taizeFormDraft');

          if (window.app) {
            window.app.events = [];
            window.app.refreshUI();
          }

          this.showSuccess('–í—Å—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ');

          // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è
          setTimeout(() => {
            location.reload();
          }, 2000);

        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
          this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ');
        }
      } else {
        this.showInfo('–î–∞–Ω—ñ –Ω–µ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ');
      }
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
   */
  setupAdvancedFeatures() {
    this.setupKeyboardShortcuts();
    this.setupFormAutoComplete();
    this.setupQuickActions();
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–∞—Ä—è—á–∏—Ö –∫–ª–∞–≤—ñ—à
   */
  setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
      // Ctrl+S –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–Ω–µ—Ç–∫–∏
      if (e.ctrlKey && e.key === 's') {
        e.preventDefault();
        this.saveFormData();
        this.showInfo('–ß–µ—Ä–Ω–µ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
      }

      // Ctrl+Enter –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
      if (e.ctrlKey && e.key === 'Enter') {
        e.preventDefault();
        this.showPreview();
      }

      // Escape –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
      if (e.key === 'Escape' && e.target.closest('#admin-section')) {
        this.clearForm();
      }
    });
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
   */
  setupFormAutoComplete() {
    const locationInput = document.getElementById('event-location');
    if (!locationInput) return;

    // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ª–æ–∫–∞—Ü—ñ–π
    const popularLocations = [
      '–¶–µ—Ä–∫–≤–∞ –°–≤—è—Ç–æ–≥–æ –ú–∏–∫–æ–ª–∞—è, –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫',
      '–ö–æ—Å—Ç–µ–ª –°–≤—è—Ç–æ–≥–æ –ê–Ω—Ç–æ–Ω—ñ—è, –õ—å–≤—ñ–≤',
      '–ü–∞—Ä–∞—Ñ—ñ—è–ª—å–Ω–∏–π –¥—ñ–º, –¢–µ—Ä–Ω–æ–ø—ñ–ª—å',
      '–ö–∞—Ç–µ–¥—Ä–∞–ª—å–Ω–∏–π —Å–æ–±–æ—Ä, –ß–µ—Ä–Ω—ñ–≤—Ü—ñ',
      '–ü–∞—Ä–∞—Ñ—ñ—è –í–æ–∑–¥–≤–∏–∂–µ–Ω–Ω—è –ß–µ—Å–Ω–æ–≥–æ –•—Ä–µ—Å—Ç–∞, –ö–∞–ª—É—à'
    ];

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è datalist –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
    const datalist = document.createElement('datalist');
    datalist.id = 'location-suggestions';

    popularLocations.forEach(location => {
      const option = document.createElement('option');
      option.value = location;
      datalist.appendChild(option);
    });

    locationInput.setAttribute('list', 'location-suggestions');
    locationInput.parentNode.appendChild(datalist);
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
   */
  setupQuickActions() {
    const form = document.getElementById('event-form');
    if (!form) return;

    const quickActionsDiv = document.createElement('div');
    quickActionsDiv.className = 'quick-actions';
    quickActionsDiv.innerHTML = `
            <h4>üöÄ –®–≤–∏–¥–∫—ñ –¥—ñ—ó</h4>
            <div style="display: flex; gap: 10px; flex-wrap: wrap; margin: 10px 0;">
                <button type="button" class="btn btn-secondary btn-sm" onclick="adminManager.fillSampleData()">
                    üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–æ–º
                </button>
                <button type="button" class="btn btn-secondary btn-sm" onclick="adminManager.clearForm()">
                    üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
                </button>
                <button type="button" class="btn btn-secondary btn-sm" onclick="adminManager.duplicateLastEvent()">
                    üìã –î—É–±–ª—é–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–¥—ñ—é
                </button>
            </div>
        `;

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–æ—é
    form.parentNode.insertBefore(quickActionsDiv, form);
  }

  /**
   * –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –ø—Ä–∏–∫–ª–∞–¥–æ–º
   */
  fillSampleData() {
    const sampleData = {
      'event-title': '–ú–æ–ª–∏—Ç–æ–≤–Ω–∞ –∑—É—Å—Ç—Ä—ñ—á —É –¥—É—Å—ñ –¢–µ–∑–µ',
      'event-location': '–ú—ñ—Å—Ü–µ–≤–∞ –ø–∞—Ä–∞—Ñ—ñ—è',
      'event-description': '–°–ø—ñ–ª—å–Ω–∞ –º–æ–ª–∏—Ç–≤–∞ –∑ –ø—ñ—Å–Ω—è–º–∏, —á–∏—Ç–∞–Ω–Ω—è–º –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ü–∏—Å–∞–Ω–Ω—è —Ç–∞ –º–µ–¥–∏—Ç–∞—Ü—ñ—î—é –≤ —Ç–∏—à—ñ',
      'event-full-description': '–ó–∞–ø—Ä–æ—à—É—î–º–æ –≤—Å—ñ—Ö –Ω–∞ –º–æ–ª–∏—Ç–æ–≤–Ω—É –∑—É—Å—Ç—Ä—ñ—á —É –¥—É—Å—ñ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –¢–µ–∑–µ. –ü—Ä–æ–≥—Ä–∞–º–∞ –≤–∫–ª—é—á–∞—î —Å–ø—ñ–ª—å–Ω—ñ –ø—ñ—Å–Ω—ñ, —á–∞—Å —Ç–∏—Ö–æ—ó –º–æ–ª–∏—Ç–≤–∏ —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è –°–ª–æ–≤–∞ –ë–æ–∂–æ–≥–æ. –ü—ñ—Å–ª—è –º–æ–ª–∏—Ç–≤–∏ –±—É–¥–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑–∞ —á–∞—à–∫–æ—é —á–∞—é.',
      'event-program-link': 'https://taize.fr/uk'
    };

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –Ω–µ–¥—ñ–ª—é –æ 18:00
    const nextSunday = new Date();
    nextSunday.setDate(nextSunday.getDate() + (7 - nextSunday.getDay()));
    nextSunday.setHours(18, 0, 0, 0);
    sampleData['event-date'] = nextSunday.toISOString().slice(0, 16);

    Object.entries(sampleData).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.value = value;
      }
    });

    this.showInfo('–§–æ—Ä–º—É –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—Ä–∏–∫–ª–∞–¥–æ–º');
  }

  /**
   * –î—É–±–ª—é–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ–¥—ñ—ó
   */
  duplicateLastEvent() {
    if (!window.app || !window.app.events || window.app.events.length === 0) {
      this.showError('–ù–µ–º–∞—î –ø–æ–¥—ñ–π –¥–ª—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è');
      return;
    }

    const lastEvent = window.app.events[window.app.events.length - 1];

    // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–∞–Ω–∏–º–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ–¥—ñ—ó
    document.getElementById('event-title').value = lastEvent.title + ' (–∫–æ–ø—ñ—è)';
    document.getElementById('event-location').value = lastEvent.location;
    document.getElementById('event-lat').value = lastEvent.lat;
    document.getElementById('event-lng').value = lastEvent.lng;
    document.getElementById('event-description').value = lastEvent.description;
    document.getElementById('event-full-description').value = lastEvent.fullDescription || '';
    document.getElementById('event-program-link').value = lastEvent.programLink || '';

    if (lastEvent.photos && lastEvent.photos.length > 0) {
      document.getElementById('event-photos').value = lastEvent.photos.join(', ');
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –ø—ñ–∑–Ω—ñ—à–µ
    const eventDate = new Date(lastEvent.date);
    eventDate.setDate(eventDate.getDate() + 7);
    document.getElementById('event-date').value = eventDate.toISOString().slice(0, 16);

    this.showSuccess('–û—Å—Ç–∞–Ω–Ω—é –ø–æ–¥—ñ—é –ø—Ä–æ–¥—É–±–ª—å–æ–≤–∞–Ω–æ');
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
   */
  clearForm() {
    const form = document.getElementById('event-form');
    if (form) {
      form.reset();
      this.clearFormData();

      // –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
      form.querySelectorAll('.field-error').forEach(error => error.remove());
      form.querySelectorAll('input, textarea').forEach(field => {
        field.style.borderColor = '#e0e0e0';
        field.style.boxShadow = '';
      });
    }

    this.showInfo('–§–æ—Ä–º—É –æ—á–∏—â–µ–Ω–æ');
  }

  /**
   * –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
   */

  /**
   * –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó
   */
  debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  /**
   * –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  showError(message) {
    console.error(message);
    this.showNotification('‚ùå ' + message, 'error');
  }

  showSuccess(message) {
    console.log(message);
    this.showNotification('‚úÖ ' + message, 'success');
  }

  showInfo(message) {
    console.info(message);
    this.showNotification('‚ÑπÔ∏è ' + message, 'info');
  }

  /**
   * –ü–æ–∫–∞–∑ —Å—É—á–∞—Å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–º—ñ—Å—Ç—å alert
   */
  showNotification(message, type = 'info') {
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    let container = document.getElementById('notifications-container');
    if (!container) {
      container = document.createElement('div');
      container.id = 'notifications-container';
      container.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                max-width: 400px;
            `;
      document.body.appendChild(container);
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;

    const colors = {
      error: { bg: '#fee', border: '#e74c3c', text: '#c0392b' },
      success: { bg: '#efe', border: '#27ae60', text: '#1e8449' },
      info: { bg: '#e3f2fd', border: '#2196f3', text: '#1976d2' }
    };

    const color = colors[type] || colors.info;

    notification.style.cssText = `
            background: ${color.bg};
            border: 2px solid ${color.border};
            color: ${color.text};
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            font-weight: 500;
            position: relative;
            animation: slideIn 0.3s ease-out;
            cursor: pointer;
        `;

    notification.innerHTML = `
            ${message}
            <span style="position: absolute; top: 5px; right: 10px; font-size: 18px; opacity: 0.6;">√ó</span>
        `;

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ –∞–Ω—ñ–º–∞—Ü—ñ—ó
    if (!document.getElementById('notification-styles')) {
      const styles = document.createElement('style');
      styles.id = 'notification-styles';
      styles.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
      document.head.appendChild(styles);
    }

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    const autoRemove = setTimeout(() => {
      this.removeNotification(notification);
    }, 5000);

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ –∫–ª—ñ–∫—É
    notification.addEventListener('click', () => {
      clearTimeout(autoRemove);
      this.removeNotification(notification);
    });
  }

  /**
   * –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   */
  removeNotification(notification) {
    notification.style.animation = 'slideOut 0.3s ease-in';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
let adminManager;

document.addEventListener('DOMContentLoaded', () => {
  adminManager = new AdminManager();
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è–∫ –º–æ–¥—É–ª—å
if (typeof module !== 'undefined' && module.exports) {
  module.exports = AdminManager;
}